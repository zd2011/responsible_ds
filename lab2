{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "RuBQtfv5iZac",
        "Ip6sQt0eQLAU"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zd2011/responsible_ds/blob/main/lab2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Lab 2 - Detecting and Mitigating Biases using Fairlearn**"
      ],
      "metadata": {
        "id": "253jTpcO60Mf"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "G8WWJHeLzxMp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Following Labs:**\n",
        "\n",
        "*   Lab2: Detecting bias and mitigating bias via pre-processing interventions\n",
        "*   Lab3: Mitigating bias via in-processing and postprocessing interventions"
      ],
      "metadata": {
        "id": "6u42_ViARKxy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Detecting Bias Using Fairlearn"
      ],
      "metadata": {
        "id": "3LrSVlCSDA9Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Bias in ML\n",
        "\n",
        "A machine learning algorithm will attempt to find patterns, or generalizations, in the training dataset to use when a prediction for a new instance is needed. For example, the model may discover a pattern whereby a person with a salary over \\$40,000 and an outstanding debt of less than $5 is very likely to repay a loan.\n",
        "\n",
        "However, sometimes the patterns that are found and replicated by a model may not be desirable or, even worse, might be illegal. For example, a loan repayment model may determine that age plays a significant role in the prediction of repayment because the training dataset happened to have better repayment for one age group compared to another. This raises two problems: 1) the training dataset may not be representative of the true population of loan applications for all age groups, and 2) even if it is representative, it is illegal (with limited exceptions) to base loan decisions on an applicant's age, regardless of whether this is an accurate basis for prediction based on historical data.\n",
        "\n",
        "The loan scenario describes an intuitive example of illegal bias. However, not all undesirable biases in machine learning are illegal; it may also exist in more subtle ways. For example, a loan company may want a diverse portfolio of customers across all income levels, and thus, will deem it undesirable if they are making more loans to high income levels over low income levels. Although this is not illegal or unethical, it is undesirable for the company's strategy.\n",
        "\n",
        "## The `Fairlearn` toolkit\n",
        "\n",
        "Fairlearn is a toolkit designed to help address this problem with fairness metrics and bias mitigators. Fairness metrics can be used to check for bias in machine learning workflows. Bias mitigators can be used to overcome bias in the workflow to produce a more fair outcome.\n",
        "\n",
        "As these two examples illustrate, a bias detection and/or mitigation toolkit needs to be tailored to the particular bias of interest. More specifically, we need to define the attribute(s), called protected (or sensitive) attributes of interest: the attribute whose skewness/bias we are trying to detect and mitigate. The term suggests that the system designer should be sensitive to these features when assessing and mitigating group fairness.\n",
        "\n",
        "Several stages of the machine learning pipeline are susceptible to bias. One useful way to categorize these stages are, intuitively, 'before,' 'during,' and 'after' training a model. These stages are commonly referred to as *pre-processing*, *in-processing*, and *post-processing* (in Fairlearn, in-processing techniques are available in the *reductions* package)."
      ],
      "metadata": {
        "id": "RuBQtfv5iZac"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Fairlearn\n",
        "\n",
        "In Labs 2 and 3 we will use Fairlearn to detect and mitigate bias in a classifier. We will use the [ACS PUMS files](https://www.census.gov/programs-surveys/acs/microdata.html), particularly a fraction of the ACS Income dataset, and train a classifier to predict whether an individual has a salary greater than $50K. The protected attribute will be the sex of the individual.\n",
        "\n",
        "In this Lab 2 notebook, we will:\n",
        "\n",
        "1. Load the dataset and conduct basic data exploration and preprocessing\n",
        "2. Explore possible fairness metrics\n",
        "3. Train a logistic regression classifier and evaluate the fairness of this classifier\n",
        "4. Train other logistic regression classifiers with pre-processing interventions and re-evaluate fairness\n",
        "5. Compare the results obtained in 3 and 4"
      ],
      "metadata": {
        "id": "Ip6sQt0eQLAU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1. Import Statements\n",
        "First, we install Fairlearn and import the necessary packages\n",
        "\n",
        "**BEWARE**: On Colab, you will probably have to restart the runtime (in the `Runtime` dropdown menu at the top of the screen) to import these successfully."
      ],
      "metadata": {
        "id": "uFlpmI9rSD3H"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "9LqUU91SjcFB"
      },
      "outputs": [],
      "source": [
        "%%capture\n",
        "#@markdown\n",
        "\n",
        "!pip install fairlearn\n",
        "!pip install folktables\n",
        "#!pip install matplotlib==3.4 --force-reinstall\n",
        "!git clone https://github.com/lurosenb/superquail"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install matplotlib --upgrade"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 538
        },
        "id": "j8fIoFTPfEtl",
        "outputId": "598f52a2-937d-42b5-fa14-a995245abe01"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (3.4.0)\n",
            "Collecting matplotlib\n",
            "  Downloading matplotlib-3.6.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (9.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.4/9.4 MB\u001b[0m \u001b[31m36.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (0.11.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: numpy>=1.19 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (1.24.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (1.4.4)\n",
            "Collecting contourpy>=1.0.1\n",
            "  Downloading contourpy-1.0.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (300 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m300.0/300.0 KB\u001b[0m \u001b[31m25.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (3.0.9)\n",
            "Collecting fonttools>=4.22.0\n",
            "  Downloading fonttools-4.38.0-py3-none-any.whl (965 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m965.4/965.4 KB\u001b[0m \u001b[31m47.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib) (23.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "Installing collected packages: fonttools, contourpy, matplotlib\n",
            "  Attempting uninstall: matplotlib\n",
            "    Found existing installation: matplotlib 3.4.0\n",
            "    Uninstalling matplotlib-3.4.0:\n",
            "      Successfully uninstalled matplotlib-3.4.0\n",
            "Successfully installed contourpy-1.0.7 fonttools-4.38.0 matplotlib-3.6.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "matplotlib",
                  "mpl_toolkits"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as mtick\n",
        "import seaborn as sn\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import sklearn.metrics as skm\n",
        "from sklearn.model_selection import cross_val_score\n",
        "import matplotlib.ticker as ticker\n",
        "\n",
        "from folktables import ACSDataSource, ACSEmployment, ACSIncome, ACSPublicCoverage, ACSTravelTime\n",
        "from superquail.data.acs_helper import ACSData\n",
        "\n",
        "from fairlearn.metrics import MetricFrame\n",
        "from fairlearn.metrics import demographic_parity_difference, demographic_parity_ratio, selection_rate\n",
        "from fairlearn.metrics import false_negative_rate, false_positive_rate\n",
        "\n",
        "from IPython.display import clear_output "
      ],
      "metadata": {
        "id": "XJ5pQ55zkzHp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e589ee1-1aed-4fa2-c6fb-d32e9d9f68a0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.2\n",
            "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#2. Load Data, Conduct Exploratory Analysis, and Preprocess Data\n",
        "Next, we will load the Folktables dataset.  The Folktables dataset is taken from US Census Data and is built to solve a few simple prediction tasks. The sample we pull is data from 2018 in California. The column names are described in the table below. Note that certain categorical variables have been mapped to integer values, which we will keep as-is for the following analyses.\n",
        "\n",
        "For more information on the this dataset, please see the following paper (namely page 18): https://eaamo2021.eaamo.org/accepted/acceptednonarchival/EAMO21_paper_16.pdf"
      ],
      "metadata": {
        "id": "XttcS7t0SNbL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "| Column Name | Feature | Description/Notes |\n",
        "| --- | ----------- | --- |\n",
        "| PINCP | Total person’s income | (Target) 1 if >= $50k, 0 if less |\n",
        "| SEX | Sex | (Sensitive Attribute) Male=1, Female=2 |\n",
        "| RAC1P | Race | (Sensitive Attribute) White=1, Black=2, Other races are between 3 and 9 |\n",
        "| AGEP | Age | Ranges from 0-99 |\n",
        "| COW | Class of Worker | Ranges 1-9, see paper for description |\n",
        "| SCHL | Education Level | Ranges 1-24, see paper for description |\n",
        "| MAR | Marital Status | Ranges 1-5, see paper for description |\n",
        "| OCCP | Occupation | Codes taken from Public Use Microdata Sample (PUMS) from the US Census, see paper |\n",
        "| POBP | Place of Birth | Codes taken from Public Use Microdata Sample (PUMS) from the US Census, see paper |\n",
        "| RELP | Relationship | Relationship of individual to person who responded to the Census taker. Ranges 0-17, see paper for description |\n",
        "| WKHP | Hours worked per week | Ranges from 0-99, averaged over previous year |"
      ],
      "metadata": {
        "id": "ErJSui-veHGd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Read in the folktables dataset \n",
        "full_df, features_df, target_df, groups_df = ACSData().return_acs_data_scenario(scenario=\"ACSIncome\", subsample=70000)\n",
        "\n",
        "print(full_df.shape)\n",
        "full_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "MgVUEi3nET1p",
        "outputId": "a5be508c-0ba8-4bd3-8534-ef5d5ab17c97"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(70000, 11)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AGEP  COW  SCHL  MAR    OCCP   POBP  RELP  WKHP  SEX  RAC1P  PINCP\n",
              "0  32.0  1.0  16.0  1.0   120.0  360.0   1.0  40.0  2.0    8.0    0.0\n",
              "1  43.0  1.0  22.0  1.0    10.0  210.0   1.0  60.0  2.0    6.0    1.0\n",
              "2  38.0  1.0  17.0  5.0  4220.0  314.0   0.0  40.0  1.0    8.0    0.0\n",
              "3  33.0  1.0  22.0  1.0  1360.0    6.0   1.0  45.0  1.0    1.0    1.0\n",
              "4  23.0  1.0  19.0  5.0  9640.0    6.0   0.0  40.0  1.0    1.0    0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d1c9d7e-a5e2-4de6-8d96-474f9c827ec1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGEP</th>\n",
              "      <th>COW</th>\n",
              "      <th>SCHL</th>\n",
              "      <th>MAR</th>\n",
              "      <th>OCCP</th>\n",
              "      <th>POBP</th>\n",
              "      <th>RELP</th>\n",
              "      <th>WKHP</th>\n",
              "      <th>SEX</th>\n",
              "      <th>RAC1P</th>\n",
              "      <th>PINCP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>210.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4220.0</td>\n",
              "      <td>314.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9640.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d1c9d7e-a5e2-4de6-8d96-474f9c827ec1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9d1c9d7e-a5e2-4de6-8d96-474f9c827ec1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9d1c9d7e-a5e2-4de6-8d96-474f9c827ec1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Check missing values and data types\n",
        "full_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9D-hmorRFKia",
        "outputId": "f1f684db-709b-4f99-ebda-65d58917c627"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 70000 entries, 0 to 69999\n",
            "Data columns (total 11 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   AGEP    70000 non-null  float64\n",
            " 1   COW     70000 non-null  float64\n",
            " 2   SCHL    70000 non-null  float64\n",
            " 3   MAR     70000 non-null  float64\n",
            " 4   OCCP    70000 non-null  float64\n",
            " 5   POBP    70000 non-null  float64\n",
            " 6   RELP    70000 non-null  float64\n",
            " 7   WKHP    70000 non-null  float64\n",
            " 8   SEX     70000 non-null  float64\n",
            " 9   RAC1P   70000 non-null  float64\n",
            " 10  PINCP   70000 non-null  float64\n",
            "dtypes: float64(11)\n",
            "memory usage: 5.9 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Change data types of categorical features\n",
        "numerical_cols = ['AGEP','WKHP']\n",
        "categorical_cols = ['COW','SCHL','MAR','OCCP','POBP','RELP','RAC1P','SEX']\n",
        "\n",
        "for col in categorical_cols:\n",
        "  full_df[col] = full_df[col].astype('int')\n",
        "  full_df[col] = full_df[col].astype('str')\n",
        "\n",
        "full_df.info()\n",
        "full_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "j1x2mdUaID9G",
        "outputId": "ed778ff6-6c50-4025-8ae7-dbe9bd2cd054"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 70000 entries, 0 to 69999\n",
            "Data columns (total 11 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   AGEP    70000 non-null  float64\n",
            " 1   COW     70000 non-null  object \n",
            " 2   SCHL    70000 non-null  object \n",
            " 3   MAR     70000 non-null  object \n",
            " 4   OCCP    70000 non-null  object \n",
            " 5   POBP    70000 non-null  object \n",
            " 6   RELP    70000 non-null  object \n",
            " 7   WKHP    70000 non-null  float64\n",
            " 8   SEX     70000 non-null  object \n",
            " 9   RAC1P   70000 non-null  object \n",
            " 10  PINCP   70000 non-null  float64\n",
            "dtypes: float64(3), object(8)\n",
            "memory usage: 5.9+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AGEP COW SCHL MAR  OCCP POBP RELP  WKHP SEX RAC1P  PINCP\n",
              "0  32.0   1   16   1   120  360    1  40.0   2     8    0.0\n",
              "1  43.0   1   22   1    10  210    1  60.0   2     6    1.0\n",
              "2  38.0   1   17   5  4220  314    0  40.0   1     8    0.0\n",
              "3  33.0   1   22   1  1360    6    1  45.0   1     1    1.0\n",
              "4  23.0   1   19   5  9640    6    0  40.0   1     1    0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c237ec1-4b56-4eb0-9f80-6260b98fe712\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGEP</th>\n",
              "      <th>COW</th>\n",
              "      <th>SCHL</th>\n",
              "      <th>MAR</th>\n",
              "      <th>OCCP</th>\n",
              "      <th>POBP</th>\n",
              "      <th>RELP</th>\n",
              "      <th>WKHP</th>\n",
              "      <th>SEX</th>\n",
              "      <th>RAC1P</th>\n",
              "      <th>PINCP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>360</td>\n",
              "      <td>1</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43.0</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>210</td>\n",
              "      <td>1</td>\n",
              "      <td>60.0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>4220</td>\n",
              "      <td>314</td>\n",
              "      <td>0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33.0</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>1360</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>45.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23.0</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>9640</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c237ec1-4b56-4eb0-9f80-6260b98fe712')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4c237ec1-4b56-4eb0-9f80-6260b98fe712 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4c237ec1-4b56-4eb0-9f80-6260b98fe712');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will conduct some basic exploratory analysis of the data beginning with plotting the distributions of our features."
      ],
      "metadata": {
        "id": "pHRpGsboZ_wa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Plot distribution of categorical columns\n",
        "fig, ax = plt.subplots(2,4,figsize=(12,8))\n",
        "ax[0,0].barh(full_df['COW'].value_counts().index[::-1], full_df['COW'].value_counts()[::-1])\n",
        "ax[0,0].set_title('COW')\n",
        "\n",
        "ax[0,1].barh(full_df['SCHL'].value_counts().index[:10][::-1], full_df['SCHL'].value_counts()[:10][::-1])\n",
        "ax[0,1].set_title('SCHL (top-10)')\n",
        "\n",
        "ax[0,2].barh(full_df['MAR'].value_counts().index[::-1], full_df['MAR'].value_counts()[::-1])\n",
        "ax[0,2].set_title('MAR')\n",
        "\n",
        "ax[0,3].barh(full_df['OCCP'].value_counts().index[:10][::-1], full_df['OCCP'].value_counts()[:10][::-1])\n",
        "ax[0,3].set_title('OCCP (top-10)')\n",
        "\n",
        "ax[1,0].barh(full_df['POBP'].value_counts().index[:10][::-1], full_df['POBP'].value_counts()[:10][::-1])\n",
        "ax[1,0].set_title('POBP (top-10)')\n",
        "\n",
        "ax[1,1].barh(full_df['RELP'].value_counts().index[:10][::-1], full_df['RELP'].value_counts()[:10][::-1])\n",
        "ax[1,1].set_title('RELP (top-10)')\n",
        "\n",
        "ax[1,2].barh(full_df['SEX'].value_counts().index[::-1], full_df['SEX'].value_counts()[::-1])\n",
        "ax[1,2].set_title('SEX')\n",
        "labels = ('Female = 2', 'Male = 1')\n",
        "ax[1,2].set_yticklabels(labels)\n",
        "\n",
        "ax[1,3].barh(full_df['RAC1P'].value_counts().index[::-1], full_df['RAC1P'].value_counts()[::-1])\n",
        "ax[1,3].set_title('RAC1P')\n",
        "\n",
        "fig.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "umsO2aZ3J3WT",
        "outputId": "d0c94271-1f27-4cb0-a052-5054292427bf"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Plot distribution of numeric features\n",
        "fig, ax = plt.subplots(1,2,figsize=(12,8))\n",
        "\n",
        "#histogram for AGEP (age)\n",
        "num_of_bins_agep = 10\n",
        "y_vals_agep, x_vals_agep, e_agep = ax[0].hist(full_df['AGEP'], bins=num_of_bins_agep, edgecolor='black')\n",
        "ax[0].set_title(\"Histogram of AGEP\")\n",
        "ax[0].set_xlabel(\"age\")\n",
        "ax[0].set_ylabel(\"Percentage\")\n",
        "y_max_agep = round((max(y_vals_agep) / len(full_df)) + 0.02, 2)\n",
        "ax[0].set_yticks(ticks=np.arange(0.0, y_max_agep * len(full_df), 0.01 * len(full_df)))\n",
        "ax[0].set_ylim(ax[0].get_yticks()[0], ax[0].get_yticks()[-1])\n",
        "ax[0].yaxis.set_major_formatter(ticker.PercentFormatter(xmax=len(full_df)))\n",
        "\n",
        "#histogram for WKHP (Hours worked per week)\n",
        "num_of_bins_wkhp = 10\n",
        "y_vals_wkhp, x_vals_wkhp, e_wkhp = ax[1].hist(full_df['WKHP'], bins=num_of_bins_wkhp, edgecolor='black')\n",
        "ax[1].set_title(\"Histogram of WKHP\")\n",
        "ax[1].set_xlabel(\"hours worked per week\")\n",
        "ax[1].set_ylabel(\"Percentage\")\n",
        "y_max_wkhp = round((max(y_vals_wkhp) / len(full_df)) + 0.05, 2)\n",
        "ax[1].set_yticks(ticks=np.arange(0.0, y_max_wkhp * len(full_df), 0.05 * len(full_df)))\n",
        "ax[1].set_ylim(ax[1].get_yticks()[0], ax[1].get_yticks()[-1])\n",
        "ax[1].yaxis.set_major_formatter(ticker.PercentFormatter(xmax=len(full_df)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "fIN5VbbVQT4_",
        "outputId": "ea38f932-dd19-4763-cb84-56ec1259e5d5"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see, there is nothing very unusual about the distritubtion of the features in this dataset. Also, we note that the proportion of men and women is rather balanced.\n",
        "\n",
        "We can also examine the pairwise correlations between the numeric features and our target variable."
      ],
      "metadata": {
        "id": "uhrMJoM1sOrj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Plot pairwise correlations between numeric features\n",
        "\n",
        "sn.heatmap(full_df.corr(), mask=np.identity(len(full_df.corr())), annot=True, cmap='Blues')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "KXO7X2tMyTI6",
        "outputId": "3142369d-a81d-4411-b1a5-4ff6b07e4430"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here, we can see that there are only relatively low correlations between our target variable (PINCP) and our numeric features of age and hours worked per week."
      ],
      "metadata": {
        "id": "5kyJCKQ3yxhQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we can look at the distribution of our target variable as well as the joint distribution of our protected and target attributes."
      ],
      "metadata": {
        "id": "iL6p5-Axxbvh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Examine distribution of target variable\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(1,1,1)\n",
        "full_df['PINCP'].value_counts().divide(full_df.shape[0]).plot(kind='bar')\n",
        "ax.set_xlabel('Income')\n",
        "ax.set_ylabel('Frequency')\n",
        "plt.setp(ax.get_xticklabels(), rotation=0, ha='center')\n",
        "ax.yaxis.set_major_formatter(mtick.PercentFormatter(1))\n",
        "labels_target = ('0 (<$50k)', '1 (>=$50k)')\n",
        "ax.set_xticklabels(labels_target)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "7JCRb5o76oiH",
        "outputId": "9fef28ac-db49-452b-e271-87228d0e959c"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the graph above we note that there is a considerable imbalance of the target variable. Let's see how is this distribution looks by gender."
      ],
      "metadata": {
        "id": "Kq9_1ZSXduNs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Plot distribution of target variable among males and plot distribution of target variable among females\n",
        "hist_df = full_df.groupby(['SEX','PINCP']).size().to_frame('count').reset_index()\n",
        "new_col = full_df.groupby(['SEX']).PINCP.value_counts(normalize=True).values\n",
        "hist_df['frac'] = new_col\n",
        "hist_df.replace({'SEX': {'1': 'Male', '2': 'Female'}}, inplace=True)\n",
        "hist_df.replace({'PINCP': {0.0: '<$50k', 1.0: '>=$50k'}}, inplace=True)\n",
        "sn.barplot(x='PINCP', y='frac', hue='SEX', data=hist_df)\n",
        "plt.ylabel('Percent of Group')\n",
        "plt.xlabel('Income')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "rWqWUOfamsAm",
        "outputId": "8b65f2f9-0cbe-4ea4-ca31-a7e78062c698"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Showing the number of Males and Females per Income group\n",
        "full_df.groupby(['SEX', 'PINCP'])['PINCP'].count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mb4qHH0dQYAB",
        "outputId": "f6a7b4ea-e999-4917-94f3-2738da7ea3f1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SEX  PINCP\n",
              "1    0.0      19808\n",
              "     1.0      17257\n",
              "2    0.0      21453\n",
              "     1.0      11482\n",
              "Name: PINCP, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here, we can see that the proportion of males who make at least \\$50k is higher than the proportion of females who make at least $50k in this dataset. Thus, the initial finding about imbalance of the target variable is more accentuated for females."
      ],
      "metadata": {
        "id": "3lB_TQJGE1tV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TODO**: Given the graphs above, what results might we expect from our classifier when it comes to labelling males and females as high or low income?"
      ],
      "metadata": {
        "id": "c1ffXieBGVGx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer**: Given the data, the classifier would label males as high income at a greater proportion than compared to female income."
      ],
      "metadata": {
        "id": "vpjRuRyZgbHi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TODO**: Why might this data be biased? What type of bias is this?\n"
      ],
      "metadata": {
        "id": "Vccos4UWJieU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer**: the preexsisting bias that men get promoted more often than women do, men might also feel more pressure in inflating income."
      ],
      "metadata": {
        "id": "7oVti2pfgfqD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown #**TODO**: write some code in this cell that replicates the above histogram plot for black and white individuals in the data.\n",
        "# TODO: write code here\n",
        "\n",
        "hist_df = full_df.groupby(['RAC1P','PINCP']).size().to_frame('count').reset_index()\n",
        "new_col = full_df.groupby(['RAC1P']).PINCP.value_counts(normalize=True).values\n",
        "hist_df['frac'] = new_col\n",
        "hist_df = hist_df[(hist_df.RAC1P == '1') | (hist_df.RAC1P == '2')]\n",
        "hist_df.replace({'RAC1P': {'1': 'White', '2': 'Black'}}, inplace=True)\n",
        "hist_df.replace({'RAC1P': {0.0: '<$50k', 1.0: '>=$50k'}}, inplace=True)\n",
        "sn.barplot(x='PINCP', y='frac', hue='RAC1P', data=hist_df)\n",
        "plt.ylabel('Percent of Group')\n",
        "plt.xlabel('Income')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nQP7PQb0BGWv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "9fa3ad69-3a01-46e1-d6fa-b0fd221094f7"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing\n",
        "Next, we will do some preprocessing on our data to prepare it for use in our model."
      ],
      "metadata": {
        "id": "v7mYHwvvrlZn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Standardize numerical features\n",
        "scaler = StandardScaler()\n",
        "full_df[numerical_cols] = scaler.fit_transform(full_df[numerical_cols])\n",
        "display(full_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "UJmRpooUU6cC",
        "outputId": "1e3405b0-a122-47d8-87e1-c2491561eff0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           AGEP COW SCHL MAR  OCCP POBP RELP      WKHP SEX RAC1P  PINCP\n",
              "0     -0.716199   1   16   1   120  360    1  0.162143   2     8    0.0\n",
              "1      0.022977   1   22   1    10  210    1  1.699108   2     6    1.0\n",
              "2     -0.313012   1   17   5  4220  314    0  0.162143   1     8    0.0\n",
              "3     -0.649001   1   22   1  1360    6    1  0.546384   1     1    1.0\n",
              "4     -1.320980   1   19   5  9640    6    0  0.162143   1     1    0.0\n",
              "...         ...  ..  ...  ..   ...  ...  ...       ...  ..   ...    ...\n",
              "69995  0.896549   1   20   1  3255    6    1 -1.221125   2     1    0.0\n",
              "69996 -1.052188   2   21   5  1032   26    0  0.546384   1     6    1.0\n",
              "69997  0.426164   1   20   1   530  247    1  0.162143   2     6    1.0\n",
              "69998 -0.313012   2   19   1  2040    6    1  2.851831   1     1    0.0\n",
              "69999 -0.111419   7   18   1  4920   37    1 -1.374821   2     1    1.0\n",
              "\n",
              "[70000 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70fce26e-1a43-4898-868a-4b332cd58098\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGEP</th>\n",
              "      <th>COW</th>\n",
              "      <th>SCHL</th>\n",
              "      <th>MAR</th>\n",
              "      <th>OCCP</th>\n",
              "      <th>POBP</th>\n",
              "      <th>RELP</th>\n",
              "      <th>WKHP</th>\n",
              "      <th>SEX</th>\n",
              "      <th>RAC1P</th>\n",
              "      <th>PINCP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.716199</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>360</td>\n",
              "      <td>1</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.022977</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>210</td>\n",
              "      <td>1</td>\n",
              "      <td>1.699108</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.313012</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>4220</td>\n",
              "      <td>314</td>\n",
              "      <td>0</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.649001</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>1360</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0.546384</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.320980</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>5</td>\n",
              "      <td>9640</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69995</th>\n",
              "      <td>0.896549</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>3255</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.221125</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69996</th>\n",
              "      <td>-1.052188</td>\n",
              "      <td>2</td>\n",
              "      <td>21</td>\n",
              "      <td>5</td>\n",
              "      <td>1032</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>0.546384</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69997</th>\n",
              "      <td>0.426164</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>530</td>\n",
              "      <td>247</td>\n",
              "      <td>1</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69998</th>\n",
              "      <td>-0.313012</td>\n",
              "      <td>2</td>\n",
              "      <td>19</td>\n",
              "      <td>1</td>\n",
              "      <td>2040</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2.851831</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69999</th>\n",
              "      <td>-0.111419</td>\n",
              "      <td>7</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>4920</td>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.374821</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70000 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70fce26e-1a43-4898-868a-4b332cd58098')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-70fce26e-1a43-4898-868a-4b332cd58098 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-70fce26e-1a43-4898-868a-4b332cd58098');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown One-hot encode categorical features\n",
        "full_df = pd.get_dummies(full_df, columns=categorical_cols)\n",
        "display(full_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "ttOb_ULRsGUB",
        "outputId": "38d2def4-ef66-4d94-fa8c-f8ad462c904d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           AGEP      WKHP  PINCP  COW_1  COW_2  COW_3  COW_4  COW_5  COW_6  \\\n",
              "0     -0.716199  0.162143    0.0      1      0      0      0      0      0   \n",
              "1      0.022977  1.699108    1.0      1      0      0      0      0      0   \n",
              "2     -0.313012  0.162143    0.0      1      0      0      0      0      0   \n",
              "3     -0.649001  0.546384    1.0      1      0      0      0      0      0   \n",
              "4     -1.320980  0.162143    0.0      1      0      0      0      0      0   \n",
              "...         ...       ...    ...    ...    ...    ...    ...    ...    ...   \n",
              "69995  0.896549 -1.221125    0.0      1      0      0      0      0      0   \n",
              "69996 -1.052188  0.546384    1.0      0      1      0      0      0      0   \n",
              "69997  0.426164  0.162143    1.0      1      0      0      0      0      0   \n",
              "69998 -0.313012  2.851831    0.0      0      1      0      0      0      0   \n",
              "69999 -0.111419 -1.374821    1.0      0      0      0      0      0      0   \n",
              "\n",
              "       COW_7  ...  RAC1P_2  RAC1P_3  RAC1P_4  RAC1P_5  RAC1P_6  RAC1P_7  \\\n",
              "0          0  ...        0        0        0        0        0        0   \n",
              "1          0  ...        0        0        0        0        1        0   \n",
              "2          0  ...        0        0        0        0        0        0   \n",
              "3          0  ...        0        0        0        0        0        0   \n",
              "4          0  ...        0        0        0        0        0        0   \n",
              "...      ...  ...      ...      ...      ...      ...      ...      ...   \n",
              "69995      0  ...        0        0        0        0        0        0   \n",
              "69996      0  ...        0        0        0        0        1        0   \n",
              "69997      0  ...        0        0        0        0        1        0   \n",
              "69998      0  ...        0        0        0        0        0        0   \n",
              "69999      1  ...        0        0        0        0        0        0   \n",
              "\n",
              "       RAC1P_8  RAC1P_9  SEX_1  SEX_2  \n",
              "0            1        0      0      1  \n",
              "1            0        0      0      1  \n",
              "2            1        0      1      0  \n",
              "3            0        0      1      0  \n",
              "4            0        0      1      0  \n",
              "...        ...      ...    ...    ...  \n",
              "69995        0        0      0      1  \n",
              "69996        0        0      1      0  \n",
              "69997        0        0      0      1  \n",
              "69998        0        0      1      0  \n",
              "69999        0        0      0      1  \n",
              "\n",
              "[70000 rows x 806 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5dcbfd0d-4ffc-4f6c-9285-47f83a2a68db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGEP</th>\n",
              "      <th>WKHP</th>\n",
              "      <th>PINCP</th>\n",
              "      <th>COW_1</th>\n",
              "      <th>COW_2</th>\n",
              "      <th>COW_3</th>\n",
              "      <th>COW_4</th>\n",
              "      <th>COW_5</th>\n",
              "      <th>COW_6</th>\n",
              "      <th>COW_7</th>\n",
              "      <th>...</th>\n",
              "      <th>RAC1P_2</th>\n",
              "      <th>RAC1P_3</th>\n",
              "      <th>RAC1P_4</th>\n",
              "      <th>RAC1P_5</th>\n",
              "      <th>RAC1P_6</th>\n",
              "      <th>RAC1P_7</th>\n",
              "      <th>RAC1P_8</th>\n",
              "      <th>RAC1P_9</th>\n",
              "      <th>SEX_1</th>\n",
              "      <th>SEX_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.716199</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.022977</td>\n",
              "      <td>1.699108</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.313012</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.649001</td>\n",
              "      <td>0.546384</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.320980</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69995</th>\n",
              "      <td>0.896549</td>\n",
              "      <td>-1.221125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69996</th>\n",
              "      <td>-1.052188</td>\n",
              "      <td>0.546384</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69997</th>\n",
              "      <td>0.426164</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69998</th>\n",
              "      <td>-0.313012</td>\n",
              "      <td>2.851831</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69999</th>\n",
              "      <td>-0.111419</td>\n",
              "      <td>-1.374821</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70000 rows × 806 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5dcbfd0d-4ffc-4f6c-9285-47f83a2a68db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5dcbfd0d-4ffc-4f6c-9285-47f83a2a68db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5dcbfd0d-4ffc-4f6c-9285-47f83a2a68db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Since the sex attribute is already binary we can drop one of the redundant dummy columns\n",
        "#note: males are now labeled as 1 and females are labeled as 0\n",
        "full_df.drop(columns=['SEX_2'], inplace=True)\n",
        "full_df.rename(columns={'SEX_1':'SEX'}, inplace=True)\n",
        "\n",
        "full_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "1rLw5F6_sHew",
        "outputId": "4002fa7d-cdbb-4bd2-a35d-3e1aa132656c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AGEP      WKHP  PINCP  COW_1  COW_2  COW_3  COW_4  COW_5  COW_6  COW_7  \\\n",
              "0 -0.716199  0.162143    0.0      1      0      0      0      0      0      0   \n",
              "1  0.022977  1.699108    1.0      1      0      0      0      0      0      0   \n",
              "2 -0.313012  0.162143    0.0      1      0      0      0      0      0      0   \n",
              "3 -0.649001  0.546384    1.0      1      0      0      0      0      0      0   \n",
              "4 -1.320980  0.162143    0.0      1      0      0      0      0      0      0   \n",
              "\n",
              "   ...  RAC1P_1  RAC1P_2  RAC1P_3  RAC1P_4  RAC1P_5  RAC1P_6  RAC1P_7  \\\n",
              "0  ...        0        0        0        0        0        0        0   \n",
              "1  ...        0        0        0        0        0        1        0   \n",
              "2  ...        0        0        0        0        0        0        0   \n",
              "3  ...        1        0        0        0        0        0        0   \n",
              "4  ...        1        0        0        0        0        0        0   \n",
              "\n",
              "   RAC1P_8  RAC1P_9  SEX  \n",
              "0        1        0    0  \n",
              "1        0        0    0  \n",
              "2        1        0    1  \n",
              "3        0        0    1  \n",
              "4        0        0    1  \n",
              "\n",
              "[5 rows x 805 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ee97928-dbef-4c60-a819-949e146959af\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGEP</th>\n",
              "      <th>WKHP</th>\n",
              "      <th>PINCP</th>\n",
              "      <th>COW_1</th>\n",
              "      <th>COW_2</th>\n",
              "      <th>COW_3</th>\n",
              "      <th>COW_4</th>\n",
              "      <th>COW_5</th>\n",
              "      <th>COW_6</th>\n",
              "      <th>COW_7</th>\n",
              "      <th>...</th>\n",
              "      <th>RAC1P_1</th>\n",
              "      <th>RAC1P_2</th>\n",
              "      <th>RAC1P_3</th>\n",
              "      <th>RAC1P_4</th>\n",
              "      <th>RAC1P_5</th>\n",
              "      <th>RAC1P_6</th>\n",
              "      <th>RAC1P_7</th>\n",
              "      <th>RAC1P_8</th>\n",
              "      <th>RAC1P_9</th>\n",
              "      <th>SEX</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.716199</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.022977</td>\n",
              "      <td>1.699108</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.313012</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.649001</td>\n",
              "      <td>0.546384</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.320980</td>\n",
              "      <td>0.162143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 805 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ee97928-dbef-4c60-a819-949e146959af')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4ee97928-dbef-4c60-a819-949e146959af button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4ee97928-dbef-4c60-a819-949e146959af');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#3. Train Logistic Regression Classifier\n",
        "Next, we will split our data into training and test sets randomly.  Then, we will train a logistic regression classifier and evaluate possible biases within that classifier.\n",
        "\n",
        "### Aside: Accuracy as a Metric\n",
        "\n",
        "Traditional machine learning (i.e. without a focus on fairness) often measures the quality of a classifier by it's **accuracy**, or what fraction of samples were labeled correctly:\n",
        "$$\n",
        "\\text{Accuracy} = \\frac{\\text{Number of Correctly Labeled People}}{\\text{Total Number of People}}\n",
        "$$\n",
        "This can also be expressed using the terms of the [\"Confusion Matrix\"](https://en.wikipedia.org/wiki/Confusion_matrix), where we let\n",
        "- $\\text{TP} = $ \"True Positives\" $ = \\text{Num. people Correctly labeled as Positive}$\n",
        "- $\\text{FP} = $ \"False Positives\" $ = \\text{Num. people Wrongly labeled as Positive}$\n",
        "- $\\text{TN} = $ \"True Negatives\" $ = \\text{Num. people Correctly labeled as Negative}$\n",
        "- $\\text{FN} = $ \"False Negatives\" $ = \\text{Num. people Wrongly labeled as Negative}$\n",
        "\n",
        "Which lets us express the Accuacy as\n",
        "$$\n",
        "\\text{Accuracy} = \\frac{TP + TN}{TP + FP + TN + FN}\n",
        "$$"
      ],
      "metadata": {
        "id": "lldcQFkCx1Y5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Split data into training and test sets\n",
        "target = full_df['PINCP']\n",
        "full_df.drop(columns='PINCP', inplace=True)\n",
        "\n",
        "#note: here we are setting a value for the random_state (seed) parameter so that the results of this lab will remain consistent\n",
        "X_train, X_test, y_train, y_test = train_test_split(full_df, target, test_size=0.2, random_state=4)\n",
        "\n",
        "print(f'X_train shape: {X_train.shape}')\n",
        "print(f'X_test shape: {X_test.shape}')\n",
        "print(f'y_train shape: {y_train.shape}')\n",
        "print(f'y_test shape: {y_test.shape}')"
      ],
      "metadata": {
        "id": "ugcIGIK_XDxC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7bb8863f-a0d7-4d9e-8202-fd1f55705714"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (56000, 804)\n",
            "X_test shape: (14000, 804)\n",
            "y_train shape: (56000,)\n",
            "y_test shape: (14000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown #**TODO**: What would be the accuracy ($\\frac{(TP + TN)}{(TP + FP + TN + FN)}$) of a classifier that always predicts the majority label (baseline classifier)?\n",
        "#@markdown Since the majority label is 0, the accuracy of this majority label classifier would be the number of 0's over the total number of records.\n",
        "\n",
        "# TODO: write code here\n",
        "\n",
        "baseline_accuracy = 8241/(8241+5759)\n",
        "print(f'General baseline accuracy: {baseline_accuracy:.4f}')\n",
        "\n",
        "y_test.value_counts()"
      ],
      "metadata": {
        "id": "NlbkMZZEoFxG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "919881bc-797d-4274-d796-e72435ce737b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "General baseline accuracy: 0.5886\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0    8295\n",
              "1.0    5705\n",
              "Name: PINCP, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown #**TODO**: What would be the accuracy ($\\frac{(TP + TN)}{(TP + FP + TN + FN)}$) for the Male and Female groups considering a classifier that always predicts the majority label (baseline classifier) for each of these groups?\n",
        "\n",
        "# TODO: write code here\n",
        "sex_y_test = y_test.to_frame()\n",
        "sex_y_test = sex_y_test.assign(sex = X_test.SEX)\n",
        "\n",
        "male_baseline_accuracy = 2332/(2332+3455)\n",
        "female_baseline_accuracy = 4328/(4328+3885)\n",
        "print(f'Male baseline accuracy: {male_baseline_accuracy:.4f}')\n",
        "print(f'Female baseline accuracy: {female_baseline_accuracy:.4f}')\n",
        "\n",
        "sex_y_test.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FHt5VXJefZ8L",
        "outputId": "e83a2280-8df4-473b-8714-33bc8608fed8"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male baseline accuracy: 0.4030\n",
            "Female baseline accuracy: 0.5270\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PINCP  sex\n",
              "0.0    0      4346\n",
              "       1      3949\n",
              "1.0    1      3443\n",
              "       0      2262\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Implement logistic regression\n",
        "clf = LogisticRegression()\n",
        "clf.fit(X_train, y_train)\n",
        "clf_accuracy = clf.score(X_test, y_test)\n",
        "\n",
        "clear_output()\n",
        "\n",
        "print(f'Logistic Regression test accuracy: {clf_accuracy:.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d6f1ZdiyXSE3",
        "outputId": "df5757d2-59e5-42e2-ed15-50d9205c126b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression test accuracy: 0.8144\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluate fairness"
      ],
      "metadata": {
        "id": "d9vugXFztlG8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will evaluate the fairness of our classifier on the test set. We first define the **selection rate** of the classifier on a group:\n",
        "$$\n",
        "\\text{Selection Rate} = \\frac{\\text{Number of People Classified Positive}}{\\text{Total Number of People}}\n",
        "$$\n",
        "We will compute the selection rate amongst men and amongst women, and compare them. The difference of their selection rates is called the **Demographic parity difference**, and the ratio of their rates is called the **Demographic parity ratio**.\n",
        "\n",
        "In general, if we have more than 2 classes,\n",
        "- The demographic parity difference is the difference of the largest and smallest selection rates, so it is always positive. A demographic parity difference of 0 means that all groups have the same selection rate.\n",
        "\n",
        "- The demographic parity ratio is the ratio of the smallest to largest selection rates, so it is always between 0 and 1, where a ratio of 1 means that all groups have the same selection rate.\n",
        "\n",
        "<!-- Next, we will evaluate the fairness of our classifier on the test set.  We will first focus on two metrics - demographic parity difference and demographic parity ratio.  **Demographic parity difference** is defined as the difference between the largest and the smallest group-level selection rate across all values of the sensitive feature(s).  A demographic parity difference of 0 means that all groups have the same selection rate.  **Demographic parity ratio** is defined as the ratio between the smallest and the largest group-level selection rate across all values of the sensitive feature(s).  A demographic parity ratio of 1 means that all groups have the same selection rate. -->\n",
        "\n",
        "More formally: let $X$ denote a feature vector used for predictions, $A$ be a single sensitive feature (such as age or race), $Y$ be the true label, and $h$ a classifier or predictor resulted from a Machine Learning algorithm. Then:\n",
        "\n",
        "*Demographic Parity Difference* is defined as $(max_a\\mathbb{E}[h(X)~|~  A = a])~ - ~ (min_a\\mathbb{E}[h(X)~|~  A = a]) $\n",
        "\n",
        "\n",
        "*Demographic Parity Ratio* is defined as $\\frac{max_a\\mathbb{E}[h(X)~|~  A = a]}{min_a\\mathbb{E}[h(X)~|~  A = a]} $"
      ],
      "metadata": {
        "id": "GlGbK5w4x7q-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Evaluate the fairness of the classifier using `demographic_parity_difference` and `demographic_parity_ratio`\n",
        "#note: we are conducting this analysis over the test set\n",
        "\n",
        "#compute test predictions\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "#compute demographic parity difference and demographic parity ratio\n",
        "demo_parity_diff = demographic_parity_difference(y_test, y_pred, sensitive_features=X_test['SEX'])\n",
        "demo_parity_ratio = demographic_parity_ratio(y_test, y_pred, sensitive_features=X_test['SEX'])\n",
        "\n",
        "print(f'Demographic parity difference: {demo_parity_diff:.4f}')\n",
        "print(f'Demographic parity ratio: {demo_parity_ratio:.4f}')\n",
        "\n",
        "#compute selection rate for males and females\n",
        "male_selection_rate = selection_rate(y_test[X_test['SEX']==1], y_pred[X_test['SEX']==1])\n",
        "female_selection_rate = selection_rate(y_test[X_test['SEX']==0], y_pred[X_test['SEX']==0])\n",
        "\n",
        "print(f'Male selection rate: {male_selection_rate:.4f}')\n",
        "print(f'Female selection rate: {female_selection_rate:.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9-CPsT9bhhy",
        "outputId": "20ce8882-c212-4744-bdba-b4ed5426edda"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Demographic parity difference: 0.1327\n",
            "Demographic parity ratio: 0.7133\n",
            "Male selection rate: 0.4629\n",
            "Female selection rate: 0.3302\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here, we can see that there are substantial differences in selection rates between males and females with males being significantly more likely to be classified as high income."
      ],
      "metadata": {
        "id": "JbwDQ2nQ8c_J"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fairlearn also provides the fairlearn.metrics.MetricFrame class to evaluate disparities in treatment between different sub-populations.\n",
        "\n",
        "The **fairlearn.metrics.MetricFrame** object requires a minimum of four arguments:\n",
        "\n",
        "*   The underlying metric function(s) to be evaluated\n",
        "*   The true values\n",
        "*   The predicted values\n",
        "*   The sensitive feature values\n",
        "\n",
        "Metric functions must have a signature ''fn(y_true, y_pred)'', i.e., require only two arguments.  Here we will again look at selection rate, but we will also examine a few other metrics.  We will use accuracy, selection rate, false negative rate, and false positive rate."
      ],
      "metadata": {
        "id": "DxWyzIlKyHIH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Evaluate the fairness of the classifier using the MetricFrame class for the `SEX` variable\n",
        "\n",
        "#changing sensitive feature inputs to be 'male' and 'female' instead of 1 and 0\n",
        "sensitive_feature_sex = X_test['SEX'].replace({0:'female', 1:'male'})\n",
        "\n",
        "#evaluation metrics\n",
        "metrics = {'accuracy': skm.accuracy_score,\n",
        "           'selection_rate': selection_rate,  # i.e., the percentage of the population which have ‘1’ as their predicted label\n",
        "           'FNR': false_negative_rate,\n",
        "           'FPR': false_positive_rate\n",
        "           }\n",
        "\n",
        "grouped_on_sex = MetricFrame(metrics=metrics,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_sex)"
      ],
      "metadata": {
        "id": "0lhzxtUcmay1"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The **fairlearn.metrics.MetricFrame** has the **overall** property, which evaluates the metrics on the entire dataset."
      ],
      "metadata": {
        "id": "P-AAN3eYyOrh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title\n",
        "grouped_on_sex.overall"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JPuojgxHm4EG",
        "outputId": "902e09fd-d1bf-4883-bc5d-4d0d77ccd362"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "accuracy          0.814357\n",
              "selection_rate    0.400286\n",
              "FNR               0.236635\n",
              "FPR               0.150573\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown # **TODO**: Evaluate fairness for the `RAC1P` variable (for black and white individuals at minimum), and show `grouped_on_race.overall` \n",
        "\n",
        "# TODO: write code here\n",
        "\n",
        "\n",
        "sensitive_feature_race = X_test['RAC1P_2'].replace({0:'white', 1:'black'})\n",
        "\n",
        "#evaluation metrics\n",
        "metrics = {'accuracy': skm.accuracy_score,\n",
        "           'selection_rate': selection_rate,  # i.e., the percentage of the population which have ‘1’ as their predicted label\n",
        "           'FNR': false_negative_rate,\n",
        "           'FPR': false_positive_rate\n",
        "           }\n",
        "\n",
        "grouped_on_race = MetricFrame(metrics=metrics,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_race)\n",
        "grouped_on_race.overall"
      ],
      "metadata": {
        "id": "OG4i1QxPYDm9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8968172b-49f6-4c47-e935-0989ce855d8a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "accuracy          0.814357\n",
              "selection_rate    0.400286\n",
              "FNR               0.236635\n",
              "FPR               0.150573\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown\n",
        "grouped_on_race.overall"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HD4OsxeWbXjW",
        "outputId": "dbe2f121-245b-4ace-acc2-0b34d135923a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "accuracy          0.814357\n",
              "selection_rate    0.400286\n",
              "FNR               0.236635\n",
              "FPR               0.150573\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The **fairlearn.metrics.MetricFrame** object also has the **by_group** functionality. This displays the selected metrics evaluated on each subgroup defined by the categories in the sensitive_features (sex in our case)."
      ],
      "metadata": {
        "id": "yr-EFAs8yQBd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title\n",
        "grouped_on_sex.by_group"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "F4KM3xmxm9Ng",
        "outputId": "35b42c68-668a-41cf-81ad-da755d3dd835"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        accuracy  selection_rate       FNR       FPR\n",
              "SEX                                                 \n",
              "female  0.822034        0.330206  0.277630  0.126093\n",
              "male    0.807495        0.462933  0.209701  0.177513"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c59a6251-3f3b-45ca-a479-d32079903f05\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accuracy</th>\n",
              "      <th>selection_rate</th>\n",
              "      <th>FNR</th>\n",
              "      <th>FPR</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SEX</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>0.822034</td>\n",
              "      <td>0.330206</td>\n",
              "      <td>0.277630</td>\n",
              "      <td>0.126093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.807495</td>\n",
              "      <td>0.462933</td>\n",
              "      <td>0.209701</td>\n",
              "      <td>0.177513</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c59a6251-3f3b-45ca-a479-d32079903f05')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c59a6251-3f3b-45ca-a479-d32079903f05 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c59a6251-3f3b-45ca-a479-d32079903f05');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown # **TODO**: Display for `RAC1P` as well\n",
        "\n",
        "# TODO: write code here\n",
        "grouped_on_race.by_group"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "LaYBo98cbbJK",
        "outputId": "cd520ca9-27ca-4069-9b84-ae5fe5a55207"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         accuracy  selection_rate       FNR       FPR\n",
              "RAC1P_2                                              \n",
              "black    0.791525        0.325424  0.333333  0.140992\n",
              "white    0.815362        0.403579  0.232994  0.151036"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bd803ab-8046-44ce-b9e6-077f45b80a49\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accuracy</th>\n",
              "      <th>selection_rate</th>\n",
              "      <th>FNR</th>\n",
              "      <th>FPR</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAC1P_2</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>black</th>\n",
              "      <td>0.791525</td>\n",
              "      <td>0.325424</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.140992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>white</th>\n",
              "      <td>0.815362</td>\n",
              "      <td>0.403579</td>\n",
              "      <td>0.232994</td>\n",
              "      <td>0.151036</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bd803ab-8046-44ce-b9e6-077f45b80a49')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3bd803ab-8046-44ce-b9e6-077f45b80a49 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3bd803ab-8046-44ce-b9e6-077f45b80a49');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reminder: Females are labeled 0 and males are labeled 1."
      ],
      "metadata": {
        "id": "LNr0r1yIIE3Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown Plot the metric values\n",
        "\n",
        "metrics_1 = {'accuracy': skm.accuracy_score,\n",
        "           'selection_rate': selection_rate,  # i.e., the percentage of the population which have ‘1’ as their predicted label\n",
        "           }\n",
        "\n",
        "metrics_2 = {\n",
        "           'FNR': false_negative_rate,\n",
        "           'FPR': false_positive_rate\n",
        "           }\n",
        "\n",
        "grouped_on_sex_accuracy_selection = MetricFrame(metrics=metrics_1,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_sex)\n",
        "\n",
        "grouped_on_sex_fpr_fnr = MetricFrame(metrics=metrics_2,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_sex)\n",
        "\n",
        "grouped_on_sex_accuracy_selection.by_group.plot.bar(\n",
        "    subplots=False, \n",
        "    figsize=(10, 7), \n",
        "    ylim=[0,1],\n",
        "    title=\"Accuracy and selection rate by sex\",\n",
        "    )\n",
        "\n",
        "grouped_on_sex_fpr_fnr.by_group.plot.bar(\n",
        "    subplots=False, \n",
        "    figsize=(10, 7), \n",
        "    ylim=[0,1],\n",
        "    title=\"FNR and FPR by sex\",\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 966
        },
        "id": "5B9z7HUdm_up",
        "outputId": "b8b37727-3ba8-43d6-d928-48ca59001ed6"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot: title={'center': 'FNR and FPR by sex'}, xlabel='SEX'>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown #**TODO**: Replicate the above plots for at `RAC1P` and at least black/white individuals in the data. \n",
        "\n",
        "# TODO: write code here\n",
        "metrics_1 = {'accuracy': skm.accuracy_score,\n",
        "           'selection_rate': selection_rate,  # i.e., the percentage of the population which have ‘1’ as their predicted label\n",
        "           }\n",
        "\n",
        "metrics_2 = {\n",
        "           'FNR': false_negative_rate,\n",
        "           'FPR': false_positive_rate\n",
        "           }\n",
        "\n",
        "grouped_on_race_accuracy_selection = MetricFrame(metrics=metrics_1,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_race)\n",
        "\n",
        "grouped_on_race_fpr_fnr = MetricFrame(metrics=metrics_2,\n",
        "                             y_true=y_test,\n",
        "                             y_pred=y_pred,\n",
        "                             sensitive_features=sensitive_feature_race)\n",
        "\n",
        "grouped_on_race_accuracy_selection.by_group.plot.bar(\n",
        "    subplots=False, \n",
        "    figsize=(10, 7), \n",
        "    ylim=[0,1],\n",
        "    title=\"Accuracy and selection rate by race\",\n",
        "    )\n",
        "\n",
        "grouped_on_race_fpr_fnr.by_group.plot.bar(\n",
        "    subplots=False, \n",
        "    figsize=(10, 7), \n",
        "    ylim=[0,1],\n",
        "    title=\"FNR and FPR by race\",\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 954
        },
        "id": "PK3tfGI-bjAy",
        "outputId": "8368b24a-97f6-44da-eba3-e7d6d146b41c"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f982f5d20a0>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TODO**: Observe that accuracy for male and female groups is comparable, and yet we see disparities in FPR and FNR.  Which group benefits from the discrepancies in FPR and FNR shown above?  If you were deploying this system how would you measure performance (eg. accuracy, FNR, FPR)? (Reminder: females are labelled 0, males are labelled 1)\n"
      ],
      "metadata": {
        "id": "LH7SZrv2N8ot"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer**: As we see from the graph, while males have comparable FNR and FPR, felames have a significantly higher FNR than FPR, meaning that a lot of females who does not have low income are labeled as low income. The disparaty would benefit the males as they are more accurately represented. If I deloy the system, I would measure the performance accuracy since it it holistically a representative metric of evaluation."
      ],
      "metadata": {
        "id": "5cX_eE4QhmLO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#4. Train \"Blind\" Logistic Regression Classifier (Fairness through Blindness)"
      ],
      "metadata": {
        "id": "PFqCzXyXyhcO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, we will remove the protected attribute of \"sex\" from our data and see what effect this has on the performance of our classifier."
      ],
      "metadata": {
        "id": "7cJPVQ7byn53"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Remove sensitive attribute from data\n",
        "X_train_blind = X_train.drop(columns='SEX')\n",
        "X_test_blind = X_test.drop(columns='SEX')"
      ],
      "metadata": {
        "id": "BGZewKk9tBbZ"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Implement logistic regression\n",
        "clf_blind = LogisticRegression()\n",
        "clf_blind.fit(X_train_blind, y_train) \n",
        "clf_blind_accuracy = clf_blind.score(X_test_blind, y_test)\n",
        "\n",
        "clear_output()\n",
        "\n",
        "print(f'Logistic Regression test accuracy (without sensitive attribute): {clf_blind_accuracy:.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P-0MCOFjtL9l",
        "outputId": "96231a82-4c6e-46a3-8916-135617bbe6a4"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression test accuracy (without sensitive attribute): 0.8133\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Recall the accuracy fairness of the original classifier\n",
        "print('Recall the original classifier:')\n",
        "print(f'Logistic Regression test accuracy: {clf_accuracy:.4f}')\n",
        "print(f'Demographic parity difference: {demo_parity_diff:.4f}')\n",
        "print(f'Demographic parity ratio: {demo_parity_ratio:.4f}')\n",
        "print(f'Male selection rate: {male_selection_rate:.4f}')\n",
        "print(f'Female selection rate: {female_selection_rate:.4f}')"
      ],
      "metadata": {
        "id": "5Svx5AUycMC5",
        "outputId": "4f6d13a7-d091-4966-a34e-d089a5d73ff3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recall the original classifier:\n",
            "Logistic Regression test accuracy: 0.8144\n",
            "Demographic parity difference: 0.1327\n",
            "Demographic parity ratio: 0.7133\n",
            "Male selection rate: 0.4629\n",
            "Female selection rate: 0.3302\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Evaluate fairness of the blind classifier\n",
        "\n",
        "#compute test predictions\n",
        "y_pred_blind = clf_blind.predict(X_test_blind)\n",
        "\n",
        "#compute demographic parity difference and demographic parity ratio\n",
        "demo_parity_diff_blind = demographic_parity_difference(y_test, y_pred_blind, sensitive_features=X_test['SEX'])\n",
        "demo_parity_ratio_blind = demographic_parity_ratio(y_test, y_pred_blind, sensitive_features=X_test['SEX'])\n",
        "\n",
        "print(f'Demographic parity difference (without sensitive attribute): {demo_parity_diff_blind:.4f}')\n",
        "print(f'Demographic parity ratio (without sensitive attribute): {demo_parity_ratio_blind:.4f}')\n",
        "\n",
        "#compute selection rate for males and females\n",
        "male_selection_rate_blind = selection_rate(y_test[X_test['SEX']==1], y_pred_blind[X_test['SEX']==1])\n",
        "female_selection_rate_blind = selection_rate(y_test[X_test['SEX']==0], y_pred_blind[X_test['SEX']==0])\n",
        "\n",
        "print(f'Male selection rate (without sensitive attribute): {male_selection_rate_blind:.4f}')\n",
        "print(f'Female selection rate (without sensitive attribute): {female_selection_rate_blind:.4f}')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bEg0YU9Ltbzh",
        "outputId": "587e041e-5c2d-45f0-d4fd-b29aecbd31ab"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Demographic parity difference (without sensitive attribute): 0.0917\n",
            "Demographic parity ratio (without sensitive attribute): 0.7941\n",
            "Male selection rate (without sensitive attribute): 0.4453\n",
            "Female selection rate (without sensitive attribute): 0.3537\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TODO:** describe the differences of both models in terms of accuracy and fairness among male and female groups?\n"
      ],
      "metadata": {
        "id": "Yueobvhd78gp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer**: We can see that although the accuracy is about the same, the demopgraphic parity difference decreases and the demographic parity ratio increases, meaning that the selection rate for men and women are closer. We can also see such trend from male and female selection rates."
      ],
      "metadata": {
        "id": "lh0IiGaahqs9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Nevertheless**, we see that removing the protected feature did not eliminate the biases within our classifier, as exhibited below."
      ],
      "metadata": {
        "id": "PRVVozeK0IYV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Evaluate the biases of the classifier using the MetricFrame class\n",
        "grouped_on_sex_blind = MetricFrame(metrics=metrics,\n",
        "                                     y_true=y_test,\n",
        "                                     y_pred=y_pred_blind,\n",
        "                                     sensitive_features=sensitive_feature_sex)"
      ],
      "metadata": {
        "id": "6FP75qKmuC6_"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown\n",
        "grouped_on_sex_blind.overall"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z0l6FUGluMWh",
        "outputId": "f3ea32ad-77b3-4279-b65a-98a6e26d0b2d"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "accuracy          0.813286\n",
              "selection_rate    0.402071\n",
              "FNR               0.235758\n",
              "FPR               0.152984\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown\n",
        "grouped_on_sex_blind.by_group"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "DwAXmgKcuR0M",
        "outputId": "84c35942-9b28-47fa-d3cb-6f4156b75425"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        accuracy  selection_rate       FNR       FPR\n",
              "SEX                                                 \n",
              "female  0.820369        0.353662  0.245800  0.145191\n",
              "male    0.806953        0.445346  0.229161  0.161560"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3595307-9cbe-447d-bc2a-72f13ce6c4a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accuracy</th>\n",
              "      <th>selection_rate</th>\n",
              "      <th>FNR</th>\n",
              "      <th>FPR</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SEX</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>0.820369</td>\n",
              "      <td>0.353662</td>\n",
              "      <td>0.245800</td>\n",
              "      <td>0.145191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.806953</td>\n",
              "      <td>0.445346</td>\n",
              "      <td>0.229161</td>\n",
              "      <td>0.161560</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3595307-9cbe-447d-bc2a-72f13ce6c4a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c3595307-9cbe-447d-bc2a-72f13ce6c4a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c3595307-9cbe-447d-bc2a-72f13ce6c4a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Showing all the metrics for the full data and blinded data.**"
      ],
      "metadata": {
        "id": "zENn3IQzsNjR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @markdown Comparing the results: full-data vs. blinded data\n",
        "\n",
        "#demographic parity difference\n",
        "demo_parity_diff = demographic_parity_difference(y_test, y_pred, sensitive_features=X_test['SEX'])\n",
        "demo_parity_diff_blind = demographic_parity_difference(y_test, y_pred_blind, sensitive_features=X_test['SEX'])\n",
        "\n",
        "#demographic parity ratio\n",
        "demo_parity_ratio = demographic_parity_ratio(y_test, y_pred, sensitive_features=X_test['SEX'])\n",
        "demo_parity_ratio_blind = demographic_parity_ratio(y_test, y_pred_blind, sensitive_features=X_test['SEX'])\n",
        "\n",
        "#selection rate\n",
        "male_selection_rate = selection_rate(y_test[X_test['SEX']==1], y_pred[X_test['SEX']==1])\n",
        "male_selection_rate_blind = selection_rate(y_test[X_test['SEX']==1], y_pred_blind[X_test['SEX']==1])\n",
        "\n",
        "female_selection_rate = selection_rate(y_test[X_test['SEX']==0], y_pred[X_test['SEX']==0])\n",
        "female_selection_rate_blind = selection_rate(y_test[X_test['SEX']==0], y_pred_blind[X_test['SEX']==0])\n",
        "\n",
        "#fnr\n",
        "male_fnr = false_negative_rate(y_test[X_test['SEX']==1], y_pred[X_test['SEX']==1])\n",
        "male_fnr_blind = false_negative_rate(y_test[X_test['SEX']==1], y_pred_blind[X_test['SEX']==1])\n",
        "\n",
        "female_fnr = false_negative_rate(y_test[X_test['SEX']==0], y_pred[X_test['SEX']==0])\n",
        "female_fnr_blind = false_negative_rate(y_test[X_test['SEX']==0], y_pred_blind[X_test['SEX']==0])\n",
        "\n",
        "#fpr\n",
        "male_fpr = false_positive_rate(y_test[X_test['SEX']==1], y_pred[X_test['SEX']==1])\n",
        "male_fpr_blind = false_positive_rate(y_test[X_test['SEX']==1], y_pred_blind[X_test['SEX']==1])\n",
        "\n",
        "female_fpr = false_positive_rate(y_test[X_test['SEX']==0], y_pred[X_test['SEX']==0])\n",
        "female_fpr_blind = false_positive_rate(y_test[X_test['SEX']==0], y_pred_blind[X_test['SEX']==0])\n",
        "\n",
        "#plot\n",
        "labels = ['Demo Parity Diff','Demo Parity Ratio','Sel Rate (Male)',\n",
        "          'Sel Rate (Female)', 'FNR (Male)', 'FNR (Female)', 'FPR(Male)',\n",
        "          'FPR(Female)']\n",
        "\n",
        "Y_full = [demo_parity_diff, demo_parity_ratio, male_selection_rate, \n",
        "          female_selection_rate, male_fnr, female_fnr, male_fpr, female_fpr]\n",
        "\n",
        "Y_blind = [demo_parity_diff_blind, demo_parity_ratio_blind, \n",
        "           male_selection_rate_blind, female_selection_rate_blind, male_fnr_blind, \n",
        "           female_fnr_blind, male_fpr_blind, female_fpr_blind]\n",
        "\n",
        "x = np.arange(len(labels))\n",
        "width = 0.35\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(15, 7))\n",
        "rects1 = ax.bar(x - width/2, Y_full, width, label='Full Model')\n",
        "rects2 = ax.bar(x + width/2, Y_blind, width, label='Blind Model')\n",
        "\n",
        "ax.set_title('Metrics Comparison', size=20)\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(labels)\n",
        "ax.legend(fontsize='x-large')\n",
        "ax.bar_label(rects1, padding=3, fmt='%.3f')\n",
        "ax.bar_label(rects2, padding=3, fmt='%.3f')\n",
        "ax.set_ylim([0, 1])\n",
        "fig.tight_layout()\n",
        "plt.rcParams[\"figure.figsize\"] = (18,8)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "5TOyiVARo16T",
        "outputId": "0eefe25a-4053-4c78-b4e2-36ba6683130f"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ],
            "image/png": "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d+iFF17Qk08+qbfffltHHnmkHn744RLtzJgxQ6NGjdItt9yi3NxcPfnkk1q8eLFuuOGGSj0vB4NFPAEAAAAAKGXp0qVq1qyZJOn7779X06ZN9cwzz1R6asaJJ56oBx98UJJ0yimn6NJLL9XixYv1xz/+UZJ0//336+abb9bVV18tSbrtttuUlZWluXPnRtT+iBEjdM899+iTTz5R69atNWfOHL355puaP39+iXrp6en61a9+pTvuuEOS1KlTJ33xxRcaP3687r77bu3du1f//Oc/9Y9//EMXXnihJOmBBx7Q0qVLtWPHjlA7EydO1J///GddeeWVkqQOHTpoypQpOvfcc/XQQw+pdevWlXp+KoMRGAAAAAAAlNK7d2/l5OQoJydH2dnZGj16tK666iplZ2dXqp0ePXqU2D7++OO1bds2SdKuXbuUn5+vs846q0Sdvn37Rtz+8ccfr5SUFE2bNk2zZs1Sly5dyh0lsm7dOp1zzjklys4991z9+OOP+vjjj/Xxxx9rz549+41l+/bt+vTTTzV27Fg1a9Ys9DN48GBJqtSdSg4GIzAAAAAAACilSZMmJe7i0bNnT82bN09/+9vf9NRTT0XcTnR0dIltM9O+ffuqLU5Juu666zRy5EgdddRR+t3vfletbYcrjvvvf/+7+vfvX2Z/bGxsjZ1bYgQGAAAAAAARadiwoX744Ydqa69FixaKiYnRf//73xLlb731VqXaGTRokKKjo/Xpp59q2LBh5dZJSEjQG2+8UaJs2bJlatKkiTp27KiOHTsqOjp6v7Ecc8wxat++vT788EPFx8eX+WncuHGl4q4sRmAAAAAAAFBKQUGBvvjiC0nSt99+q4yMDOXm5obWkKgut9xyi+6++26dcsopOvPMMzV//nwtXry4Um00aNBAa9eu1b59+9S8efNy69xxxx365S9/qfT0dF188cXKycnRxIkTdcsttyg6OlrR0dG64YYbdNddd+mYY45R586dNX36dH344Ydq165dqJ1JkyZp5MiRat26tS688EI1atRI69ev18KFC/XYY49V6bk4EBIYAAAAAACUsnz5ch133HGSpGbNmqljx46aOnWqrrjiimo9z0033aTt27drzJgx+uGHHzR48GBNmDBB48aNq1Q7FSUuiqWkpOiJJ55Qenq6JkyYoLZt2+r//u//9Pvf/z5UJz09XT/+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AAAAcCgjgQEA+1FUVKTRo0dr4cKFys3N1ezZs5Wbm1um3rfffqu///3v6t27d6issLBQV1xxhR599FGtW7dOS5cuVaNGjSRJzz33nN577z2tXbtW27dv1/PPP19r1wQAAAAcikhgAMB+ZGVlKT4+Xh06dFB0dLTS0tI0b968MvXuvvtu3X777WrcuHGo7NVXX1X37t3Vo0cPSdLRRx+thg0bSpJatGghyUtyFBQUyMxq4WoAAACAQxcJDADYj/z8fLVv3z60HRsbq/z8/BJ13n33XW3ZskUXXHBBifKPPvpIZqbk5GT17NlTf/nLX0rsT05OVrt27dS8eXMNHTq05i4CAAAAOAyQwACAKti3b5/Gjh2rv/71r2X2FRYW6s0339TTTz+tN998Uy+++KJee+210P5XXnlFW7du1Z49e7RkyZLaDBsAAAA45JDAAID9iImJ0ZYtW0LbeXl5iomJCW1/++23Wrt2rfr166e4uDi98847Sk1NVXZ2tmJjY3XOOeeoTZs2atq0qVJSUvTuu++WaL9x48a68MILy52WAgAAAOAnJDAAYD969eqlDRs2aNOmTSooKFBGRoZSU1ND+1u2bKmvvvpKmzdv1ubNm3XmmWdq/vz5SkpKUnJyst5//319//33Kiws1LJly9S1a1ft3r1bW7duleSN0liwYIFOOeWUurpEAAAA4JAQVdcBAECQRUVFacqUKUpOTlZRUZFGjBihhIQETZgwQUlJSSWSGaW1bt1aY8eOVa9evWRmSklJ0QUXXKBt27YpNTVVe/bs0b59+9S/f3/dcMMNtXhVAAAAwKHHnHN1cuKkpCSXnZ1dJ+cGIhE3fkFdhxCxzY2H1XUIkZu4s64jOKxlZmbqpptuUlFRka699lqNHz++3HovvPCChg4dqpUrVyopKSlU/tlnn6lr166aOHGibr31VklSXFycmjdvroYNGyoqKkr87gYAAEBNMrNVzrmk0uWMwACAw0RRUZFGjx6tRYsWKTY2Vr169VJqaqq6du1aot63336rv//97+rdu3eZNsaOHavBgweXKX/99dfVpk2bGosdAAAAOBDWwACAw0RWVpbi4+PVoUMHRUdHKy0trdzFQe+++27dfvvtaty4cYnyuXPn6qSTTlJCQkJthQwAAABEjAQGABwm8vPz1b59+9B2bGys8vPzS9R59913tWXLFl1wwQUlynfv3q377rtPv//978u0a2YaOHCgTj/9dD3++OM1EzwAAABwAEwhAVDvHSrrnWxOv+DAlfZj3759Gjt2rGbMmFFm38SJEzVmzBg1a9aszL4333xTMTEx+vLLLzVgwACdcsopOuecc6oUCwAAAFBZJDAA4DARExOjLVu2hLbz8vIUExMT2v7222+1du1a9evXT5L0xRdfKDU1VfPnz9eKFSs0Z84c3XbbbdqxY4caNGigxo0b68Ybbwy10a5dOw0ZMkRZWVkkMAAAAFDrSGAAwGGiV69e2rBhgzZt2qSYmBhlZGTomWeeCe1v2bKlvvrqq9B2v3799MADDygpKUnLly8PlU+cOFHNmjXTjTfeqO+++0779u1T8+bN9d133+nVV1/VhAkTavW6AAAAAIkEBgAcNqKiojRlyhQlJyerqKhII0aMUEJCgiZMmKCkpCSlpqZWus1t27ZpyJAhkqTCwkINGzZMgwYNqu7QAQAAgAMy51ydnDgpKcllZ2fXybmBSBwq6yJI0ubGw+o6hMhN3FnXEZRxqPR1VdfAAAAAAA4FZrbKOZdUupy7kAAAAAAAgMAjgQEAAAAAAAKPBAYAAAAAAAg8FvEEgEPFxJZ1HUHkArjWCQAAAA5tjMAAAAAAAACBRwIDAAAAAAAEHgkMAAAAAAAQeCQwAAAAAABA4JHAAAAAAAAAgUcCAwAAAAAABB4JDAAAAAAAEHgkMAAAAAAAQOCRwAAAAAAAAIFHAgMAAAAAAAQeCQwAAAAAABB4JDAAAAAAAEDgkcAAAAAAAACBRwIDAAAAAAAEHgkMAAAAAAAQeCQwAAAAAABA4EWUwDCzQWb2oZltNLPx+6n3KzNzZpZUfSECAAAAAID67oAJDDNrKOlhSYMldZV0mZl1Ladec0k3SVpR3UECAAAAAID6LZIRGGdI2uic+8Q5VyApQ9KF5dT7o6T7JP1YjfEBAAAAAABElMCIkbQlbDvPLwsxs56S2jvnFuyvITO7zsyyzSx7+/btlQ4WAAAAAADUT1VexNPMGkiaLOmWA9V1zj3unEtyziW1bdu2qqcGAAAAAAD1RCQJjHxJ7cO2Y/2yYs0lnSppqZltlnSmpPks5AkAAAAAAKpLJAmMlZJONrOTzCxaUpqk+cU7nXM7nXNtnHNxzrk4Se9ISnXOZddIxAAAAAAAoN45YALDOVco6UZJr0haL+k559w6M7vHzFJrOkAAAAAAAICoSCo5516W9HKpsgkV1O1X9bAAAAAAAAB+UuVFPAEAAAAAAGoaCQwAAAAAABB4JDAAADgEZWZmqnPnzoqPj1d6enqZ/Y8++qi6deumxMRE9e3bV7m5uZKkzZs3q0mTJkpMTFRiYqJuuOGGMsempqbq1FNPrfFrAAAAqIyI1sAAAADBUVRUpNGjR2vRokWKjY1Vr169lJqaqq5du4bqDBs2LJScmD9/vsaOHavMzExJUseOHZWTk1Nu2//+97/VrFmzGr8GAACAymIEBgAAh5isrCzFx8erQ4cOio6OVlpamubNm1eiTosWLUKPv/vuO5nZAdvdvXu3Jk+erLvuuqvaYwYAAKgqEhgAABxi8vPz1b59+9B2bGys8vPzy9R7+OGH1bFjR91222166KGHQuWbNm3SaaedpnPPPVfLly8Pld9999265ZZb1LRp05q9AAAAgINAAgMAgMPU6NGj9fHHH+u+++7TvffeK0k67rjj9Nlnn2n16tWaPHmyhg0bpl27diknJ0cff/yxhgwZUsdRAwAAlI8EBgAAh5iYmBht2bIltJ2Xl6eYmJgK66elpWnu3LmSpCOOOEJHH320JOn0009Xx44d9dFHH+ntt99Wdna24uLi1LdvX3300Ufq169fTV4GAABApZDAAADgENOrVy9t2LBBmzZtUkFBgTIyMpSamlqizoYNG0KPFyxYoJNPPlmStH37dhUVFUmSPvnkE23YsEEdOnTQqFGj9Pnnn2vz5s1688031alTJy1durTWrgkAAOBAuAsJAACHmKioKE2ZMkXJyckqKirSiBEjlJCQoAkTJigpKUmpqamaMmWKFi9erEaNGql169aaOXOmJOmNN97QhAkT1KhRIzVo0ECPPvqojjrqqDq+IgAAgAMz51ydnDgpKcllZ2fXybmBSMSNX1DXIURsc+NhdR1C5CburOsIyjhU+pp+BgAAQH1gZqucc0mly5lCAgAAAAAAAo8EBgAAAAAACDwSGAAA+DIzM9W5c2fFx8crPT29zP5HH31U3bp1U2Jiovr27avc3FxJUlZWlhITE5WYmKgePXroxRdfjLhNAAAARIYEBgAAkoqKijR69GgtXLhQubm5mj17dihBUWzYsGF6//33lZOTo9tuu01jx46VJJ166qnKzs5WTk6OMjMzdf31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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **TODO:** What are the key takeaways from this Lab?\n"
      ],
      "metadata": {
        "id": "wz-7mcA60DyU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer**:  When biases exist in data in direct or more subtle ways, the training dataset may not be representative of the true population. Therefore we need to implement metrics to evaluate the biases exists in the dataset. Not only using accuracy, but also FNR, FPR, demographic parity difference we are able to assess the biases, and the blind classifier could also effecitve reduce the biases."
      ],
      "metadata": {
        "id": "13fHBQTGhvCt"
      }
    }
  ]
}